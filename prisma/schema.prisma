generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "DATABASE_URL"
}

model Checkpoint {
  id             String   @id @db.Uuid
  checkpointName String   @db.VarChar(255)
  description    String?  @db.VarChar(255)
  isActive       Boolean? @default(true)
  location       Json     @db.Json
  siteId         String   @db.Uuid
  identifier     String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sites          Site     @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  scans          Scan[]

  @@map("checkpoints")
}

model GuardReport {
  id             String    @id @db.Uuid
  siteId         String?   @db.Uuid
  userId         String    @db.Uuid
  startTimestamp DateTime  @db.Timestamptz(6)
  endTimestamp   DateTime  @db.Timestamptz(6)
  sentTimestamp  DateTime? @db.Timestamptz(6)
  recipient      String?   @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sites          Site?     @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("guardreports")
}

model IncidentReport {
  id                  String   @id @db.Uuid
  siteId              String   @db.Uuid
  userId              String   @db.Uuid
  timeOfIncident      DateTime @db.Timestamptz(6)
  incidentType        String   @db.VarChar(255)
  incidentDescription String   @db.VarChar(255)
  photos              String[] @db.VarChar(255)
  videos              String[] @db.VarChar(255)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  sites               Site     @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users               User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("incidentreports")
}

model Patrol {
  id           String            @id @db.Uuid
  siteId       String?           @db.Uuid
  type         enum_patrols_type
  userId       String            @db.Uuid
  siteIds      String[]          @db.Uuid
  instructions String[]          @db.VarChar(255)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  sites        Site?             @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("patrols")
}

model Scan {
  id           String     @id @db.Uuid
  siteId       String     @db.Uuid
  userId       String     @db.Uuid
  identifier   String     @db.VarChar(255)
  timestamp    DateTime   @db.Timestamptz(6)
  checkpointId String     @db.Uuid
  location     String     @db.VarChar(255)
  comment      String?    @db.VarChar(255)
  assets       String[]   @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  guardName    String     @db.VarChar(255)
  siteName     String     @db.VarChar(255)
  checkpoints  Checkpoint @relation(fields: [checkpointId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sites        Site       @relation(fields: [siteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        User       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("scans")
}

model Site {
  id              String           @id @db.Uuid
  siteName        String           @db.VarChar(255)
  address         Json             @db.Json
  companyName     String           @db.VarChar(255)
  contacts        Json?            @db.Json
  isActive        Boolean
  instructions    Json?            @db.Json
  isArchived      Boolean?         @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tenantId        String           @db.Uuid
  tenants         Tenant           @relation(fields: [tenantId], references: [id])
  checkpoints     Checkpoint[]
  guardreports    GuardReport[]
  incidentreports IncidentReport[]
  patrols         Patrol[]
  scans           Scan[]

  @@map("sites")
}

model Tenant {
  id          String   @id @db.Uuid
  name        String   @unique @db.VarChar(255)
  address     String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dbUrl       String?  @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  phone       String?  @unique @db.VarChar(255)
  companyName String   @unique @db.VarChar(255)
  username    String?  @unique @db.VarChar(255)
  Site        Site[]

  @@map("tenants")
}

model User {
  id              String           @id @db.Uuid
  email           String           @unique @db.VarChar(255)
  name            String           @db.VarChar(255)
  phone           String?          @db.VarChar(255)
  tenantId        String?          @db.Uuid
  username        String           @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  isEmailVerified Boolean?         @default(false)
  isAdminUser     Boolean?         @default(false)
  isSuperAdmin    Boolean?         @default(false)
  isDeleted       Boolean?         @default(false)
  lastLogin       DateTime?        @db.Timestamptz(6)
  roles           String?          @db.VarChar(255)
  address         Json?            @db.Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  guardreports    GuardReport[]
  incidentreports IncidentReport[]
  patrols         Patrol[]
  scans           Scan[]

  @@map("users")
}

enum enum_patrols_type {
  PatrolType1
  PatrolType2
  PatrolType3
}
